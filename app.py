import streamlit as st
from agentic_rag import main as rag_main  # Importa a fun√ß√£o principal do c√≥digo RAG

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="RAG System Interface",
    page_icon="üìö",
    layout="wide"
)

# T√≠tulo da aplica√ß√£o
st.title("üìö Sistema RAG: Recupera√ß√£o e Gera√ß√£o Aumentada")
st.markdown("""
Este aplicativo permite que voc√™ fa√ßa perguntas sobre documentos processados e obtenha respostas com base em um sistema RAG (Retrieval-Augmented Generation).
""")

# Fun√ß√£o para executar o RAG de forma s√≠ncrona
def run_rag(query):
    """
    Executa o sistema RAG com a consulta fornecida.
    Retorna a resposta gerada pelo sistema.
    """
    # Aqui, chamamos a fun√ß√£o principal do c√≥digo RAG
    agent_executor = rag_main()
    response = agent_executor.invoke({"input": query})
    return response['output']

# Interface do usu√°rio
st.sidebar.header("üîç Consulta ao Sistema RAG")
query = st.sidebar.text_input("Digite sua pergunta aqui:", placeholder="Ex: Qual foi o custo total de receitas no Q3 de 2024?")

def main():
    if query:
        with st.spinner("Processando sua pergunta..."):
            # Executa o sistema RAG
            response = run_rag(query)

        # Exibe a resposta
        st.subheader("üìù Resposta:")
        st.write(response)

if __name__ == "__main__":
    main()

# Explica√ß√£o sobre o sistema
st.sidebar.markdown("""
### üìö Sobre o Sistema
- **Recupera√ß√£o**: O sistema busca informa√ß√µes relevantes no banco de dados vetorial local.
- **Gera√ß√£o**: Se necess√°rio, complementa a busca com informa√ß√µes da web.
- **Modelos**: Usa modelos avan√ßados como Google Generative AI e HuggingFace.
""")

# Rodap√©
st.sidebar.markdown("""
---
Desenvolvido com ‚ù§Ô∏è usando [Streamlit](https://streamlit.io/) e [RAG](https://github.com/HKUDS/LightRAG).
""")